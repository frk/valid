// DO NOT EDIT. This file was generated by "github.com/frk/valid".

package testdata

import (
	"errors"
	"strings"

	"github.com/frk/valid"
)

func (v T58Validator) Validate() error {
	if v.G2.F1 == nil || *v.G2.F1 == "" {
		return errors.New("G2.F1 is required")
	} else if !valid.Email(*v.G2.F1) {
		return errors.New("G2.F1 must be a valid email address")
	}
	if v.G2.F2 == nil || *v.G2.F2 == nil || **v.G2.F2 == "" {
		return errors.New("G2.F2 is required")
	} else if !valid.Email(**v.G2.F2) {
		return errors.New("G2.F2 must be a valid email address")
	}
	if v.G2.G3 == nil {
		return errors.New("G2.G3 is required")
	} else {
		if v.G2.G3.F3 == nil || *v.G2.G3.F3 == nil || **v.G2.G3.F3 == nil || ***v.G2.G3.F3 == "" {
			return errors.New("G2.G3.F3 is required")
		} else {
			f := ***v.G2.G3.F3
			if !valid.Hex(f) {
				return errors.New("G2.G3.F3 must be a valid hexadecimal string")
			} else if len(f) < 8 || len(f) > 128 {
				return errors.New("G2.G3.F3 must be of length between: 8 and 128 (inclusive)")
			}
		}
	}
	if v.G2.G4 == nil || *v.G2.G4 == nil || **v.G2.G4 == nil {
		return errors.New("G2.G4 is required")
	} else {
		f := ***v.G2.G4
		if f.G5 == nil || *f.G5 == nil {
			return errors.New("G2.G4.G5 is required")
		} else {
			f := **f.G5
			if f.F3 == nil || *f.F3 == nil || **f.F3 == "" {
				return errors.New("G2.G4.G5.F3 is required")
			} else {
				f := **f.F3
				if !strings.HasPrefix(f, "foo") {
					return errors.New("G2.G4.G5.F3 must be prefixed with: \"foo\"")
				} else if !strings.Contains(f, "bar") {
					return errors.New("G2.G4.G5.F3 must contain substring: \"bar\"")
				} else if !strings.HasSuffix(f, "baz") && !strings.HasSuffix(f, "quux") {
					return errors.New("G2.G4.G5.F3 must be suffixed with: \"baz\" or \"quux\"")
				} else if len(f) < 8 || len(f) > 64 {
					return errors.New("G2.G4.G5.F3 must be of length between: 8 and 64 (inclusive)")
				}
			}
		}
	}
	return nil
}
