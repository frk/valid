// DO NOT EDIT. This file was generated by "github.com/frk/valid".

package testdata

import (
	"errors"
	"strings"
	"time"

	"github.com/frk/valid"
)

func (v T49Validator) Validate() error {
	if v.F15a == nil || *v.F15a == "" {
		return errors.New("F15a is required")
	}
	if v.F15b == nil || *v.F15b == nil || **v.F15b == "" {
		return errors.New("F15b is required")
	}
	if v.F15c == nil || *v.F15c == nil || **v.F15c == nil || ***v.F15c == nil || ****v.F15c == nil || *****v.F15c == "" {
		return errors.New("F15c is required")
	}
	if v.F16a == nil || *v.F16a == nil || **v.F16a == "" {
		return errors.New("F16a is required")
	} else if !valid.Email(**v.F16a) {
		return errors.New("F16a must be a valid email address")
	}
	if v.F17a == nil || *v.F17a == "" {
		return errors.New("F17a is required")
	} else if !valid.Hex(*v.F17a) {
		return errors.New("F17a must be a valid hexadecimal string")
	} else if len(*v.F17a) < 8 || len(*v.F17a) > 128 {
		return errors.New("F17a must be of length between: 8 and 128 (inclusive)")
	}
	if v.F17b == nil || *v.F17b == nil || **v.F17b == nil || ***v.F17b == "" {
		return errors.New("F17b is required")
	} else {
		f := ***v.F17b
		if !valid.Hex(f) {
			return errors.New("F17b must be a valid hexadecimal string")
		} else if len(f) < 8 || len(f) > 128 {
			return errors.New("F17b must be of length between: 8 and 128 (inclusive)")
		}
	}
	if v.F18 == nil || *v.F18 == nil || **v.F18 == nil || ***v.F18 == nil || ****v.F18 == nil || *****v.F18 == "" {
		return errors.New("F18 is required")
	} else {
		f := *****v.F18
		if !strings.HasPrefix(f, "foo") {
			return errors.New("F18 must be prefixed with: \"foo\"")
		} else if !strings.Contains(f, "bar") {
			return errors.New("F18 must contain substring: \"bar\"")
		} else if !strings.HasSuffix(f, "baz") && !strings.HasSuffix(f, "quux") {
			return errors.New("F18 must be suffixed with: \"baz\" or \"quux\"")
		} else if len(f) < 8 || len(f) > 64 {
			return errors.New("F18 must be of length between: 8 and 64 (inclusive)")
		}
	}
	if v.F2 == nil || *v.F2 == (T49EmptyStruct{}) {
		return errors.New("F2 is required")
	}
	if v.F3 == nil || *v.F3 == (time.Time{}) {
		return errors.New("F3 is required")
	}
	return nil
}
