package generate

import (
	"bytes"

	"github.com/frk/valid/cmd/internal/rules/checker"
	"github.com/frk/valid/cmd/internal/search"
	"github.com/frk/valid/cmd/internal/types"
)

// #1 dependencies:
//
// fields should be validate in the same order in which they appear in the struct
// but if a field has a rule arg that references another filed then that referenced
// filed MUST appear before the referencing field
//
// Write a procedure that reorders the fields to satisfies this rule.
// -----------------------------------------------------------------------------
//
//

func File(pkg search.Pkg, infos []*checker.Info) ([]byte, error) {
	f := new(fileInfo)
	f.pkg = types.Pkg(pkg)

	for _, i := range infos {
		g := &generator{file: f, info: i}
		if err := g.run(); err != nil {
			return nil, err
		}
	}

	// file generator
	g := &generator{file: f}
	g.L(`// Code generated by "github.com/frk/valid". DO NOT EDIT.`)
	g.L(``)
	g.L(`package $0`, f.pkg.Name)
	g.genImports()
	g.genInit()
	for _, vm := range f.vms {
		g.From(vm)
		g.L(``)
	}
	if g.werr != nil {
		return nil, g.werr
	}
	return g.buf.Bytes(), nil
}

type generator struct {
	buf  bytes.Buffer
	file *fileInfo
	info *checker.Info
	vars map[*types.Obj]string
	// the target validator
	v *types.Obj
	// write error
	werr error
}

func (g *generator) run() error {
	g.prepVars()
	g.genValidator()
	if g.werr != nil {
		return g.werr
	}
	g.file.vms = append(g.file.vms, g)
	return nil
}

////////////////////////////////////////////////////////////////////////////////

func (g *generator) genValidator() {
	g.L("func ($0 *$1) Validate() error {", g.v, g.v.Type.Name)
	g.genBeforeHook()
	g.genStructBlock(g.v, current_block)
	g.genAfterHook()
	g.genReturn()
	g.L("}")
}

func (g *generator) genBeforeHook() {
	// TODO
}

func (g *generator) genAfterHook() {
	// TODO
}

func (g *generator) genReturn() {
	g.L("return nil")
}

////////////////////////////////////////////////////////////////////////////////
