// DO NOT EDIT. This file was generated by "github.com/frk/isvalid".

package testdata

import (
	"errors"

	"github.com/frk/isvalid"
)

func (v ContextOption4Validator) Validate() error {
	if v.Context == "foo" {
		if v.G0 == nil {
			return errors.New("G0 is required")
		} else {
			f := *v.G0
			if v.Context == "foo" {
				if len(f.F1) == 0 {
					return errors.New("G0.F1 is required")
				}
				if f.F2 == nil || len(*f.F2) == 0 {
					return errors.New("G0.F2 is required")
				}
			}
		}
		if v.G0 == nil {
			return errors.New("G0 is required")
		} else {
			f := *v.G0
			for _, e := range f.F1 {
				if v.Context == "bar" {
					if !isvalid.Email(e) {
						return errors.New("G0.F1 must be a valid email address")
					}
				}
				if v.Context == "baz" {
					if len(e) > 128 {
						return errors.New("G0.F1 must be of length at most: 128")
					}
				}
			}
			if f.F2 != nil {
				for k, e := range *f.F2 {
					if !isvalid.Email(k) {
						return errors.New("G0.F2 must be a valid email address")
					} else if len(k) < 8 || len(k) > 128 {
						return errors.New("G0.F2 must be of length between: 8 and 128 (inclusive)")
					}
					if !isvalid.Phone(e, "us") {
						return errors.New("G0.F2 must be a valid phone number")
					} else if !isvalid.SSN(e) {
						return errors.New("G0.F2 must be a valid SSN")
					}
				}
			}
			for _, e := range f.F3 {
				if v.Context == "foo" {
					if e == nil || *e == nil {
						return errors.New("G0.F3 cannot be nil")
					}
				}
				if v.Context == "bar" {
					if e != nil && (len(*e) < 5 || len(*e) > 10) {
						return errors.New("G0.F3 must be of length between: 5 and 10 (inclusive)")
					}
				}
			}
		}
	}
	if v.Context == "bar" {
		if v.G0 == nil {
			return errors.New("G0 is required")
		} else {
			f := *v.G0
			if f.F2 != nil {
				for k, e := range *f.F2 {
					if !isvalid.Email(k) {
						return errors.New("G0.F2 must be a valid email address")
					} else if len(k) < 8 || len(k) > 128 {
						return errors.New("G0.F2 must be of length between: 8 and 128 (inclusive)")
					}
					if !isvalid.Phone(e, "us") {
						return errors.New("G0.F2 must be a valid phone number")
					} else if !isvalid.SSN(e) {
						return errors.New("G0.F2 must be a valid SSN")
					}
				}
			}
			for _, e := range f.F3 {
				if e != nil {
					for k, e := range *e {
						if !isvalid.Email(k) {
							return errors.New("G0.F3 must be a valid email address")
						} else if len(k) < 8 || len(k) > 128 {
							return errors.New("G0.F3 must be of length between: 8 and 128 (inclusive)")
						}
						if !isvalid.Phone(e, "us") {
							return errors.New("G0.F3 must be a valid phone number")
						} else if !isvalid.SSN(e) {
							return errors.New("G0.F3 must be a valid SSN")
						}
					}
				}
			}
		}
	}
	if v.G0 != nil {
		f := *v.G0
		if f.F2 != nil {
			for k, e := range *f.F2 {
				if !isvalid.Email(k) {
					return errors.New("G0.F2 must be a valid email address")
				} else if len(k) < 8 || len(k) > 128 {
					return errors.New("G0.F2 must be of length between: 8 and 128 (inclusive)")
				}
				if !isvalid.Phone(e, "us") {
					return errors.New("G0.F2 must be a valid phone number")
				} else if !isvalid.SSN(e) {
					return errors.New("G0.F2 must be a valid SSN")
				}
			}
		}
		for _, e := range f.F3 {
			if e != nil {
				for k, e := range *e {
					if !isvalid.Email(k) {
						return errors.New("G0.F3 must be a valid email address")
					} else if len(k) < 8 || len(k) > 128 {
						return errors.New("G0.F3 must be of length between: 8 and 128 (inclusive)")
					}
					if !isvalid.Phone(e, "us") {
						return errors.New("G0.F3 must be a valid phone number")
					} else if !isvalid.SSN(e) {
						return errors.New("G0.F3 must be a valid SSN")
					}
				}
			}
		}
	}
	return nil
}
